<script type="text/javascript">
  var azwcDialog = (config = {}, editor) => {
    let exCfg = {};
    if (config.withCategory) {
      exCfg = {
        category: 'Basic',
        attributes: { class: 'fa fa-link' },
      };
    }
    var script = function() {
      // alert('Hi');
      // `this` is bound to the component element
      console.log('the element', this);
    };
    var bm = editor.BlockManager;
    var defaultType = editor.DomComponents.getType("default");
    editor.DomComponents.addType('azwc-dialog-gjc', {
      model: {
        defaults: {
          // script,
          testprop: 1,
        },
        toHTML(opt = {}) {
          return defaultType.model.prototype.toHTML
          .call(this, opt)
          .replace(/[\n\s]*<agjc-placeholder[^<]*<\/agjc-placeholder>[\n\s]*/g, '');
        },
        toJSON(opt = {}) {
          console.log('toJSON');
          return defaultType.model.prototype.toJSON.call(this, opt);
        },
        init() {
          console.log('Local hook: model.init');
          this.listenTo(this, 'change:testprop', this.handlePropChange);
          // Here we can listen global hooks with editor.on('...')
        },
        updated(property, value, prevValue) {
          console.log('Local hook: model.updated',
            'property', property, 'value', value, 'prevValue', prevValue);
        },
        removed() {
          console.log('Local hook: model.removed');
        },
        handlePropChange() {
          console.log('The value of testprop', this.get('testprop'));
        }
      },
      view: {
        init() {
          console.log('Local hook: view.init');
        },
        onRender({ el }) {
          customElements.whenDefined('azwc-dialog')
          .then((x) => {
            console.log('x :', x);
            var c = el.querySelector('azwc-dialog');
            c = el;
            console.log('c :', c);
            c.componentOnReady()
            .then(() => {
              // setInterval(() => {
              //   c.togglePadding()
              // }, 10000);
              c.setAttribute("first", "Rick");
              c.setAttribute("middle", "X");
              c.setAttribute("last", "Chen");
            });
          });
          // console.log('el :', el.childNodes[0].togglePadding);
          console.log('Local hook: view.onRender');
        },
      },
    });

    bm.add('azwc-dialog-gjc', {
      ...exCfg,
      label: 'Azwc Dialog',
      content: `<azwc-dialog class="az-dialog" data-gjs-droppable=".nothing" data-gjs-type="azwc-dialog-gjc">
        <agjc-slot data-gjs-draggable="false" data-gjs-removable="false" data-gjs-copyable="false" class="az-slot-bg1" slot="top">
          <agjc-placeholder class="dummy" data-gjs-selectable="false" data-gjs-layerable="false" data-gjs-draggable="false" data-gjs-removable="false"></agjc-placeholder>
        </agjc-slot>
        <agjc-slot data-gjs-draggable="false" data-gjs-removable="false" data-gjs-copyable="false" class="az-slot-bg2" slot="body">
          <agjc-placeholder class="dummy" data-gjs-selectable="false" data-gjs-layerable="false" data-gjs-draggable="false" data-gjs-removable="false"></agjc-placeholder>
        </agjc-slot>
      </azwc-dialog>`,
    });
  };
</script>