{% render 'grapesjs/my-components.liquid' %}
<script type="text/javascript">
  // https://github.com/artf/grapesjs/issues/2573//
  const saveCss = (config = {}) => ({
    run(editor, snd, opts = {}) {
      const component = editor.getSelected() || opts.target || editor.getWrapper();
      console.log('component :', component);
      const cssc = editor.CssComposer;
      const rules = cssc.getAll();
      let result = '';

      const { atRules, notAtRules } = this.splitRules(this.matchedRules(component, rules));
      notAtRules.forEach(rule =>  result += rule.toCSS());
      this.sortMediaObject(atRules).forEach(item => {
        let rulesStr = '';
        const atRule = item.key;
        const mRules = item.value;

        mRules.forEach(rule => {
          const ruleStr = rule.getDeclaration();

          if (rule.get('singleAtRule')) {
            result += `${atRule}{${ruleStr}}`;
          } else {
            rulesStr += ruleStr;
          }
        });

        if (rulesStr) result += `${atRule}{${rulesStr}}`;
      });

      return result;
    },

    /**
     * Get matched rules of a component
     * @param {Component} component
     * @param {Array<CSSRule>} rules
     * @returns {Array<CSSRule>}
     */
    matchedRules(component, rules) {
      const el = component.getEl();
      let result = [];

      rules.forEach(rule => {
        try {
          if (rule.selectorsToString().split(',').some(
            selector => el.matches(this.cleanSelector(selector))
          )) {
            result.push(rule);
          }
        } catch (err) {}
      });

      component.components().forEach(component => {
        result = result.concat(this.matchedRules(component, rules))
      });

      // Remove duplicates
      result = result.filter((rule, i) => result.indexOf(rule) == i);

      return result;
    },

    /**
     * Return passed selector without states
     * @param {String} selector
     * @returns {String}
     */
    cleanSelector(selector) {
      return selector.split(' ').map(item => item.split(':')[0]).join(' ');
    },

    /**
     * Split an array of rules in atRules and not
     * @param {Array<CSSRule>} rules
     * @returns {Object}
     */
    splitRules(rules) {
      const atRules = {};
      const notAtRules = [];

      rules.forEach(rule => {
        const atRule = rule.getAtRule();

        if (atRule) {
          const mRules = atRules[atRule];

          if (mRules) {
            mRules.push(rule);
          } else {
            atRules[atRule] = [rule];
          }
        } else {
          notAtRules.push(rule);
        }
      });

      return {
        atRules,
        notAtRules,
      };
    },

    /**
     * Get the numeric length of the media query string
     * @param  {String} mediaQuery Media query string
     * @return {Number}
     */
    getQueryLength(mediaQuery) {
      const length = /(-?\d*\.?\d+)\w{0,}/.exec(mediaQuery);
      if (!length) return Number.MAX_VALUE;

      return parseFloat(length[1]);
    },

    /**
     * Return a sorted array from media query object
     * @param  {Object} items
     * @return {Array}
     */
    sortMediaObject(items = {}) {
      const itemsArr = [];
      Object.keys(items).map((key) => itemsArr.push({ key, value: items[key] }))
      return itemsArr.sort(
        (a, b) => this.getQueryLength(b.key) - this.getQueryLength(a.key)
      );
    }
  })

  var azPlugin = (config = {}) => editor => {
    azPluginComponents(config, editor);

    editor.TraitManager.addType('href-next', {
      // Expects as return a simple HTML string or an HTML element
      // createLabel({ label }) {
      //   return `<div>
      //     <div>Before</div>
      //     ${label}
      //     <div>After</div>
      //   </div>`;
      // },
      // noLabel: true,
      // Expects as return a simple HTML string or an HTML element
      createInput({ trait }) {
        // Here we can decide to use properties from the trait
        const traitOpts = trait.get('options') || [];
        const options = traitOpts.length ? traitOpts : [
          { id: 'url', name: 'URL' },
          { id: 'email', name: 'Email' },
        ];

        // Create a new element container and add some content
        const el = document.createElement('div');
        el.innerHTML = `
          <select class="href-next__type">
            ${options.map(opt => `<option value="${opt.id}">${opt.name}</option>`).join('')}
          </select>
          <div class="href-next__url-inputs">
            <input class="href-next__url" placeholder="Insert URL"/>
          </div>
          <div class="href-next__email-inputs">
            <input class="href-next__email" placeholder="Insert email"/>
            <input class="href-next__email-subject" placeholder="Insert subject"/>
          </div>
        `;

        // Let's make our content interactive
        const inputsUrl = el.querySelector('.href-next__url-inputs');
        const inputsEmail = el.querySelector('.href-next__email-inputs');
        const inputType = el.querySelector('.href-next__type');
        inputType.addEventListener('change', ev => {
          switch (ev.target.value) {
            case 'url':
              inputsUrl.style.display = '';
              inputsEmail.style.display = 'none';
              break;
            case 'email':
              inputsUrl.style.display = 'none';
              inputsEmail.style.display = '';
              break;
          }
        });

        return el;
      },
      onEvent({ elInput, component, event }) {
        const inputType = elInput.querySelector('.href-next__type');
        let href = '';

        switch (inputType.value) {
          case 'url':
            const valUrl = elInput.querySelector('.href-next__url').value;
            href = valUrl;
            break;
          case 'email':
            const valEmail = elInput.querySelector('.href-next__email').value;
            const valSubj = elInput.querySelector('.href-next__email-subject').value;
            href = `mailto:${valEmail}${valSubj ? `?subject=${valSubj}` : ''}`;
            break;
        }

        editor.getSelected().setStyle({ display: 'flex' })

        component.addAttributes({ href })
        // const attr = component.getAttributes();
        // delete attr.href;
        // component.setAttributes(attr);
      },
    });

    
    editor.on('component:mount', (component) => {
      // const style = component.getStyle();
      // if (style.display === 'flex') {
      //   console.log('style.display');
      //   component.set('icon', '<i class="fa fa-paint-brush"></i>');
      // }

      const domElement = component.getEl();
      if (domElement && typeof domElement !== 'strinf') {
        try {
          const display = window.getComputedStyle(domElement).getPropertyValue('display');
          console.log('display :', display);
          if (display === 'flex') {
            component.set('icon', '<i class="fa fa-paint-brush"></i>');
          }
        } catch (error) {
          
        }
      }

    });

    editor.on('component:update', (component) => {
      const style = component.getStyle();
      // const rule = editor.CssComposer.getRule('.panel');
      console.log('editor.CssComposer.getAll() :', editor.CssComposer.getAll());
      const xxxx = saveCss({}).run(editor, null, { target: component });
      console.log('xxxx :', xxxx);
      // editor.CssComposer.getAll().remove(rule);
      // console.log('rule :', rule);
      // console.log('style :', style);
      // if (style.display === 'flex') {
      //   console.log('style.display');
      //   component.set('icon', '<i class="fa fa-paint-brush"></i>');
      // }

      const domElement = component.getEl();
      if (domElement && typeof domElement !== 'strinf') {
        try {
          const display = window.getComputedStyle(domElement).getPropertyValue('display');
          console.log('display :', display);
          if (display === 'flex') {
            component.set('icon', '<i class="fa fa-paint-brush"></i>');
          }
        } catch (error) {
          
        }
      }
    });

    const domComponents = editor.DomComponents;
    domComponents.getTypes().map(type => {
      domComponents.addType(type.id, {
        model: {
          defaults: {
            traits: [
              ...domComponents.getType(type.id).model.prototype.defaults.traits,
              {
                type: 'href-next',
                name: 'href',
                label: 'New href',
              },
            ]
          }
        }
      })
    });
  };
</script>